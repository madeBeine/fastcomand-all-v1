import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { formatCurrencyMRU, formatDate as fmtDate } from '@/utils/format';
import { useAuth } from '@/contexts/AuthContext';
import { useLockBodyScroll } from '@/hooks/use-lock-body-scroll';
import { eventBus } from '@/lib/eventBus';
import { X, Edit, Trash, Plus, Download, ArrowLeft, ArrowRight } from 'lucide-react';
import Modal from '@/components/Modal';

export type FinanceEntry = {
  id: string;
  description: string;
  date: string; // ISO
  amount: number;
  category: string;
  notes?: string;
  attachments: { name: string; url: string; type?: string }[];
  createdBy: string;
  createdAt: string;
  automatic?: boolean; // true if generated by system (orders/shipments)
  source?: { type: string; id: string; subtype?: string } | null;
};

const formatPrice = (price: number) => formatCurrencyMRU(price);

const useLocalStorageState = <T,>(key: string, initial: T) => {
  const [state, setState] = React.useState<T>(() => {
    try {
      const raw = localStorage.getItem(key);
      return raw ? (JSON.parse(raw) as T) : initial;
    } catch (e) {
      return initial;
    }
  });
  React.useEffect(() => {
    try { localStorage.setItem(key, JSON.stringify(state)); } catch (e) {}
  }, [key, state]);
  return [state, setState] as const;
};

const FinancePage: React.FC<{ type: 'revenue' | 'expense'; title?: string }> = ({ type, title }) => {
  const { user } = useAuth();
  const defaultCats = React.useMemo(() => (type === 'revenue' ? ['مبيعات', 'استثمار', 'إيراد آخر'] : ['رواتب', 'لوجيستيك', 'مصاريف مكتبية']), [type]);

  const [categories, setCategories] = useLocalStorageState<string[]>(`finance-cats-${type}`, defaultCats);
  const [entries, setEntries] = useLocalStorageState<FinanceEntry[]>(`finance-entries-${type}`, []);

  const [search, setSearch] = React.useState('');
  const [sortBy, setSortBy] = React.useState<'date' | 'amount' | 'category' | 'createdBy'>('date');
  const [sortDir, setSortDir] = React.useState<'desc' | 'asc'>('desc');
  const [categoryFilter, setCategoryFilter] = React.useState<string>('all');

  // Add form state
  const [description, setDescription] = React.useState('');
  const [date, setDate] = React.useState<string>(new Date().toISOString().slice(0, 10));
  const [amount, setAmount] = React.useState<string>('');
  const [category, setCategory] = React.useState<string>(categories[0] || '');
  const [notes, setNotes] = React.useState('');
  const [files, setFiles] = React.useState<File[]>([]);

  // Slide-in editor
  const [editing, setEditing] = React.useState<FinanceEntry | null>(null);
  const [showCategoriesEditor, setShowCategoriesEditor] = React.useState(false);

  React.useEffect(() => {
    if (!categories.includes(category) && categories.length > 0) setCategory(categories[0]);
  }, [categories, category]);

  const clearForm = () => {
    setDescription('');
    setDate(new Date().toISOString().slice(0, 10));
    setAmount('');
    setCategory(categories[0] || '');
    setNotes('');
    setFiles([]);
  };

  const handleFiles = (selected: FileList | null) => {
    if (!selected) return;
    const arr = Array.from(selected).slice(0, 3);
    setFiles(arr);
  };

  const readFilesAsData = async (fs: File[]) => {
    const reads = fs.map(f => new Promise<{ name: string; url: string; type?: string }>((res, rej) => {
      const reader = new FileReader();
      reader.onload = () => res({ name: f.name, url: reader.result as string, type: f.type });
      reader.onerror = rej;
      reader.readAsDataURL(f);
    }));
    return Promise.all(reads);
  };

  const handleAdd = async (e?: React.FormEvent) => {
    e?.preventDefault();
    if (!description.trim() || !amount) return alert('الرجاء إدخال الوصف والمبلغ');
    const amt = parseFloat(amount);
    if (isNaN(amt)) return alert('أدخل مبلغًا صالحًا');

    let attachments: { name: string; url: string; type?: string }[] = [];
    if (files.length > 0) {
      attachments = await readFilesAsData(files);
    }

    const entry: FinanceEntry = {
      id: `${Date.now()}-${Math.random().toString(36).slice(2,8)}`,
      description: description.trim(),
      date: new Date(date).toISOString(),
      amount: amt,
      category: category || 'عام',
      notes: notes.trim(),
      attachments,
      createdBy: user?.name || 'مجهول',
      createdAt: new Date().toISOString(),
      automatic: false,
      source: null
    };

    setEntries(prev => [entry, ...prev]);
    clearForm();
    eventBus.emit('finance.updated', { type });
  };

  const handleDelete = (id: string) => {
    if (!confirm('هل أنت متأكد من حذف هذه العملية؟')) return;
    setEntries(prev => prev.filter(p => p.id !== id));
    eventBus.emit('finance.updated', { type });
  };

  const handleStartEdit = (entry: FinanceEntry) => {
    setEditing(entry);
  };

  // lock body scroll while editing, adding or viewing
  const [showAddModal, setShowAddModal] = React.useState(false);
  const [viewer, setViewer] = React.useState<{ open: boolean; index: number; attachments: { name: string; url: string; type?: string }[] }>({ open: false, index: 0, attachments: [] });

  useLockBodyScroll(!!editing || showAddModal || viewer.open);

  const closeEditor = () => {
    setEditing(null);
  };

  const handleSaveEdit = async (updated: FinanceEntry) => {
    setEntries(prev => prev.map(p => p.id === updated.id ? updated : p));
    closeEditor();
    eventBus.emit('finance.updated', { type });
  };

  const downloadDataUrl = (url: string, name?: string) => {
    try {
      const a = document.createElement('a');
      a.href = url;
      a.download = name || '';
      a.target = '_blank';
      document.body.appendChild(a);
      a.click();
      a.remove();
    } catch (e) {
      console.error('download failed', e);
    }
  };

  const downloadAllAttachments = (attachments: {name: string; url: string}[]) => {
    attachments.forEach(att => {
      downloadDataUrl(att.url, att.name);
    });
  };

  const filtered = React.useMemo(() => {
    const q = search.trim().toLowerCase();
    let list = entries.slice();
    if (categoryFilter !== 'all') list = list.filter(e => e.category === categoryFilter);
    if (q) list = list.filter(e => [e.description, e.category, e.notes, e.createdBy].join(' ').toLowerCase().includes(q) || e.amount.toString().includes(q) || fmtDate(new Date(e.date)).toLowerCase().includes(q));

    list.sort((a,b) => {
      let comp = 0;
      if (sortBy === 'date') comp = new Date(a.date).getTime() - new Date(b.date).getTime();
      if (sortBy === 'amount') comp = a.amount - b.amount;
      if (sortBy === 'category') comp = a.category.localeCompare(b.category);
      if (sortBy === 'createdBy') comp = a.createdBy.localeCompare(b.createdBy);
      return sortDir === 'asc' ? comp : -comp;
    });
    return list;
  }, [entries, search, sortBy, sortDir, categoryFilter]);

  return (
    <div className="min-h-screen p-4 lg:p-8 bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="max-w-6xl mx-auto">
        <header className="mb-4 flex items-center justify-between gap-4">
          <div>
            <h1 className="text-2xl font-bold arabic-safe">{title || (type === 'revenue' ? 'صفحة الإيرادات' : 'صفحة المصاريف')}</h1>
            <p className="text-sm text-muted-foreground arabic-safe">سجل وإدا��ة العمليات المالية بطريقة سريعة واحترافية</p>
          </div>
          <div className="hidden sm:flex items-center gap-2">
            <Button onClick={() => setShowCategoriesEditor(true)} variant="outline">إدارة الفئات</Button>
            <Button onClick={() => setShowAddModal(true)} className="bg-brand-blue text-white">إضافة عملية جديدة</Button>
          </div>
        </header>

        {/* Add via modal — trigger available in header and floating button */}
        {/* Floating action button for mobile */}
        <button onClick={() => setShowAddModal(true)} className="fixed bottom-20 right-4 z-50 bg-brand-blue p-3 rounded-full text-white shadow-lg sm:hidden">
          <Plus />
        </button>

        {/* Add Entry Modal */}
        {showAddModal && (
          <Modal isOpen={showAddModal} onClose={() => setShowAddModal(false)} title="أضف عملية جديدة">
            <form onSubmit={(e) => { handleAdd(e); setShowAddModal(false); }} className="space-y-3">
              <div>
                <label className="text-sm">الوصف</label>
                <Input value={description} onChange={(e)=> setDescription(e.target.value)} placeholder="وصف العملية" className="mt-1" />
              </div>
              <div>
                <label className="text-sm">التاريخ</label>
                <Input type="date" value={date} onChange={(e)=> setDate(e.target.value)} className="mt-1" />
              </div>
              <div>
                <label className="text-sm">المبلغ (MRU)</label>
                <Input value={amount} onChange={(e)=> setAmount(e.target.value)} placeholder="0.00" inputMode="decimal" className="mt-1" />
              </div>
              <div>
                <label className="text-sm">الفئة</label>
                <select value={category} onChange={(e)=> setCategory(e.target.value)} className="w-full mt-1 px-3 py-2 border rounded">
                  {categories.map(c => <option key={c} value={c}>{c}</option>)}
                </select>
              </div>
              <div>
                <label className="text-sm">ملاحظات</label>
                <Input value={notes} onChange={(e)=> setNotes(e.target.value)} placeholder="ملاحظات إضافية" className="mt-1" />
              </div>
              <div>
                <label className="text-sm">مرفقات (حد أقصى 3)</label>
                <input type="file" accept="image/*,application/pdf" multiple onChange={(e)=> handleFiles(e.target.files)} className="mt-1" />
                <div className="flex gap-2 mt-2 flex-wrap">
                  {files.map(f => (
                    <div key={f.name} className="text-xs p-2 border rounded bg-gray-50">{f.name}</div>
                  ))}
                </div>
              </div>
              <div className="flex items-center justify-between">
                <div className="text-sm text-muted-foreground">سجل بواسطة: <span className="font-medium">{user?.name || 'مجهول'}</span></div>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={() => { clearForm(); setShowAddModal(false); }}>إلغاء</Button>
                  <Button type="submit" className="bg-green-600 text-white">حفظ</Button>
                </div>
              </div>
            </form>
          </Modal>
        )}

        {/* Toolbar */}
        <div className="mb-4 flex flex-col sm:flex-row items-stretch sm:items-center gap-3">
          <Input placeholder="بحث..." value={search} onChange={(e)=> setSearch(e.target.value)} className="flex-1" />

          <div className="flex items-center gap-2">
            <select value={sortBy} onChange={(e)=> setSortBy(e.target.value as any)} className="px-3 py-2 border rounded">
              <option value="date">ترتيب حسب التاري��</option>
              <option value="amount">ترتيب حسب المبلغ</option>
              <option value="category">ترتيب حسب الفئة</option>
              <option value="createdBy">ترتيب حسب المستخدم</option>
            </select>

            <select value={sortDir} onChange={(e)=> setSortDir(e.target.value as any)} className="px-3 py-2 border rounded">
              <option value="desc">تنازلي</option>
              <option value="asc">تصاعدي</option>
            </select>

            <select value={categoryFilter} onChange={(e)=> setCategoryFilter(e.target.value)} className="px-3 py-2 border rounded">
              <option value="all">كل الفئات</option>
              {categories.map(c => <option key={c} value={c}>{c}</option>)}
            </select>
          </div>
        </div>

        {/* List */}
        <div className="grid grid-cols-1 gap-3">
          {filtered.map(entry => (
            <Card key={entry.id} className="p-3 flex items-start gap-3 touch-manipulation">
              <div className="flex-1">
                <div className="flex items-center justify-between gap-3">
                  <div className="flex items-center gap-2">
                    <Badge className={`px-2 py-1 ${type === 'revenue' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>{type === 'revenue' ? 'إيراد' : 'مصروف'}</Badge>
                    <div>
                      <div className="font-medium arabic-safe">{entry.description} {entry.automatic && <span className="ml-2 text-xs px-2 py-1 rounded bg-gray-100 text-gray-700">تلقائي</span>}</div>
                      <div className="text-xs text-muted-foreground arabic-safe">{entry.category} • {fmtDate(new Date(entry.date))} • بواسطة {entry.createdBy}</div>
                    </div>
                  </div>

                  <div className="text-right">
                    <div className="font-semibold text-lg numeric">{formatPrice(entry.amount)}</div>
                    <div className="text-xs text-muted-foreground">{new Date(entry.createdAt).toLocaleString('en-US')}</div>
                  </div>
                </div>

                {entry.notes && <div className="mt-2 text-sm arabic-safe">{entry.notes}</div>}

                {entry.attachments && entry.attachments.length > 0 && (
                  <div className="mt-3 flex items-center gap-2 flex-wrap">
                    {entry.attachments.map((a, idx) => (
                      <div key={a.url} className="relative w-20 h-20 rounded overflow-hidden border">
                        <button onClick={() => setViewer({ open: true, index: idx, attachments: entry.attachments })} className="w-full h-full block">
                          {a.type?.startsWith('image') ? (
                            <img src={a.url} alt={a.name} className="w-full h-full object-cover" />
                          ) : (
                            <div className="w-full h-full flex items-center justify-center text-xs">{a.name}</div>
                          )}
                        </button>
                        <button onClick={() => downloadDataUrl(a.url, a.name)} className="absolute top-1 left-1 bg-white/80 rounded p-1"><Download size={12} /></button>
                      </div>
                    ))}
                    <button onClick={() => downloadAllAttachments(entry.attachments)} className="ml-2 text-sm px-2 py-1 border rounded">تحميل الكل</button>
                  </div>
                )}

              </div>

              <div className="flex flex-col gap-2 w-28">
                <Button variant="outline" onClick={() => handleStartEdit(entry)} className="flex items-center gap-2"><Edit size={14}/> تعديل</Button>
                <Button variant="ghost" onClick={() => handleDelete(entry.id)} className="text-red-600"><Trash size={14}/> حذف</Button>
              </div>
            </Card>
          ))}

          {filtered.length === 0 && (
            <div className="text-center py-12 arabic-safe">لا توجد عمليات لعرضها</div>
          )}
        </div>
      </div>

      {/* Categories editor modal */}
      {showCategoriesEditor && (
        <div className="fixed inset-0 z-50 flex items-center justify-center modal-overlay p-4">
          <div className="bg-white dark:bg-gray-900 rounded-lg shadow-lg w-full max-w-md">
            <div className="p-4 border-b flex items-center justify-between">
              <div className="font-medium">إدارة الفئات</div>
              <Button variant="ghost" onClick={()=> setShowCategoriesEditor(false)}>إغلاق</Button>
            </div>
            <div className="p-4 space-y-3">
              <CategoriesEditor categories={categories} onChange={setCategories} />
            </div>
          </div>
        </div>
      )}

      {/* Image viewer modal */}
      {viewer.open && (
        <Modal isOpen={viewer.open} onClose={() => setViewer({ open: false, index: 0, attachments: [] })} title={viewer.attachments[viewer.index]?.name || 'Preview'}>
          <div className="flex items-center justify-center">
            {viewer.attachments[viewer.index]?.type?.startsWith('image') ? (
              <img src={viewer.attachments[viewer.index].url} alt={viewer.attachments[viewer.index].name} className="max-h-[70vh] object-contain" />
            ) : (
              <iframe src={viewer.attachments[viewer.index].url} className="w-full h-[70vh]" title={viewer.attachments[viewer.index].name} />
            )}
          </div>
          <div className="flex items-center justify-between mt-4">
            <div>
              <Button variant="outline" onClick={() => setViewer(prev => ({ ...prev, index: Math.max(0, prev.index - 1) }))} className="mr-2"><ArrowLeft /></Button>
              <Button variant="outline" onClick={() => setViewer(prev => ({ ...prev, index: Math.min(prev.attachments.length - 1, prev.index + 1) }))}><ArrowRight /></Button>
            </div>
            <div>
              <Button onClick={() => downloadDataUrl(viewer.attachments[viewer.index].url, viewer.attachments[viewer.index].name)} className="mr-2">تحميل</Button>
              <Button variant="ghost" onClick={() => setViewer({ open: false, index: 0, attachments: [] })}>إغلاق</Button>
            </div>
          </div>
        </Modal>
      )}

      {/* Slide-in editor for entries */}
      {editing && (
        <div className="fixed inset-0 z-50 flex">
          <div className="flex-1" onClick={closeEditor} />
          <aside className="w-full sm:w-96 bg-white dark:bg-gray-900 p-4 overflow-auto" style={{ boxShadow: '-10px 0 30px rgba(0,0,0,0.12)' }}>
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-semibold">تعديل العملية</h3>
              <button onClick={closeEditor}><X /></button>
            </div>

            <EntryEditor entry={editing} categories={categories} onSave={handleSaveEdit} onCancel={closeEditor} onDelete={handleDelete} />
          </aside>
        </div>
      )}
    </div>
  );
};

const CategoriesEditor: React.FC<{ categories: string[]; onChange: (c: string[]) => void }> = ({ categories, onChange }) => {
  const [local, setLocal] = React.useState<string[]>(categories);
  const [newCat, setNewCat] = React.useState('');
  React.useEffect(()=> setLocal(categories), [categories]);
  return (
    <div>
      <div className="flex gap-2 mb-3">
        <Input value={newCat} onChange={(e)=> setNewCat(e.target.value)} placeholder="أضف فئة" />
        <Button onClick={() => { if (!newCat.trim()) return; setLocal(s=> [newCat.trim(), ...s]); setNewCat(''); }} className="px-3">إضافة</Button>
      </div>
      <div className="space-y-2">
        {local.map((c, idx) => (
          <div key={c} className="flex items-center justify-between p-2 border rounded">
            <div>{c}</div>
            <div className="flex items-center gap-2">
              <Button variant="outline" onClick={() => { const updated = local.filter((_, i)=> i!==idx); setLocal(updated); onChange(updated); }} className="text-red-600">حذف</Button>
            </div>
          </div>
        ))}
      </div>
      <div className="mt-3 text-right">
        <Button onClick={()=> onChange(local)} className="bg-brand-blue text-white">حفظ الفئات</Button>
      </div>
    </div>
  );
};

const EntryEditor: React.FC<{ entry: FinanceEntry; categories: string[]; onSave: (e: FinanceEntry)=> void; onCancel: ()=> void; onDelete: (id: string)=> void }> = ({ entry, categories, onSave, onCancel, onDelete }) => {
  const [description, setDescription] = React.useState(entry.description);
  const [date, setDate] = React.useState(entry.date.slice(0,10));
  const [amount, setAmount] = React.useState(entry.amount.toString());
  const [category, setCategory] = React.useState(entry.category);
  const [notes, setNotes] = React.useState(entry.notes || '');
  const [attachments, setAttachments] = React.useState(entry.attachments || [] as {name:string;url:string;type?:string}[]);
  const [newFiles, setNewFiles] = React.useState<File[]>([]);

  const handleFiles = (fs: FileList | null) => {
    if (!fs) return;
    const arr = Array.from(fs).slice(0, 3 - attachments.length);
    setNewFiles(arr);
  };

  const readFiles = async (fs: File[]) => {
    const reads = fs.map(f => new Promise<{ name: string; url: string; type?: string }>((res, rej) => {
      const reader = new FileReader();
      reader.onload = () => res({ name: f.name, url: reader.result as string, type: f.type });
      reader.onerror = rej;
      reader.readAsDataURL(f);
    }));
    return Promise.all(reads);
  };

  const handleSave = async () => {
    const amt = parseFloat(amount);
    if (isNaN(amt)) return alert('أدخل مبلغًا صحيحًا');
    let added: {name:string;url:string;type?:string}[] = [];
    if (newFiles.length > 0) {
      added = await readFiles(newFiles);
    }
    const updated: FinanceEntry = {
      ...entry,
      description: description.trim(),
      date: new Date(date).toISOString(),
      amount: amt,
      category,
      notes: notes.trim(),
      attachments: [...attachments, ...added]
    };
    onSave(updated);
  };

  return (
    <div>
      <div className="space-y-3">
        <div>
          <label className="text-sm">الوصف</label>
          <Input value={description} onChange={(e)=> setDescription(e.target.value)} className="mt-1" />
        </div>

        <div>
          <label className="text-sm">التاريخ</label>
          <Input type="date" value={date} onChange={(e)=> setDate(e.target.value)} className="mt-1" />
        </div>

        <div>
          <label className="text-sm">المبلغ (MRU)</label>
          <Input value={amount} onChange={(e)=> setAmount(e.target.value)} className="mt-1" />
        </div>

        <div>
          <label className="text-sm">الفئة</label>
          <select value={category} onChange={(e)=> setCategory(e.target.value)} className="w-full mt-1 px-3 py-2 border rounded">
            {categories.map(c=> <option key={c} value={c}>{c}</option>)}
          </select>
        </div>

        <div>
          <label className="text-sm">ملاحظات</label>
          <Input value={notes} onChange={(e)=> setNotes(e.target.value)} className="mt-1" />
        </div>

        <div>
          <label className="text-sm">المرفقات الحالية</label>
          <div className="mt-2 flex gap-2 flex-wrap items-start">
            {attachments.map((a, idx) => (
              <div key={a.url} className="relative w-20 h-20 border rounded overflow-hidden">
                {a.type?.startsWith('image') ? <img src={a.url} className="w-full h-full object-cover" alt={a.name} /> : <div className="p-2 text-xs">{a.name}</div>}
                <div className="absolute top-1 left-1 flex gap-1">
                  <button onClick={() => downloadDataUrl(a.url, a.name)} className="bg-white/80 rounded p-1"><Download size={12} /></button>
                  <button onClick={() => setViewer({ open: true, index: idx, attachments })} className="bg-white/80 rounded p-1 text-xs">عرض</button>
                </div>
              </div>
            ))}
            <div className="flex items-center">
              <button onClick={() => downloadAllAttachments(attachments)} className="ml-2 text-sm px-2 py-1 border rounded">تحميل الكل</button>
            </div>
          </div>
        </div>

        <div>
          <label className="text-sm">أضف مرفقات (متبقي {Math.max(0, 3 - attachments.length)})</label>
          <input type="file" accept="image/*,application/pdf" multiple onChange={(e)=> handleFiles(e.target.files)} className="mt-1" />
          <div className="flex gap-2 mt-2">
            {newFiles.map(f=> <div key={f.name} className="text-xs p-2 border rounded">{f.name}</div>)}
          </div>
        </div>

        <div className="flex items-center gap-2 justify-end mt-4">
          <Button variant="outline" onClick={onCancel}>إلغاء</Button>
          <Button onClick={handleSave} className="bg-brand-blue text-white">حفظ التعديل</Button>
          <Button variant="ghost" onClick={()=> onDelete(entry.id)} className="text-red-600">حذف</Button>
        </div>
      </div>
    </div>
  );
};

export default FinancePage;
